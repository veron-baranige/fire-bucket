// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: files.queries.sql

package db

import (
	"context"
	"database/sql"
)

const createFile = `-- name: CreateFile :execresult
INSERT INTO files (
  id, name, file_path, type
) VALUES (
  ?, ?, ?, ?
)
`

type CreateFileParams struct {
	ID       string
	Name     string
	FilePath string
	Type     string
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFile,
		arg.ID,
		arg.Name,
		arg.FilePath,
		arg.Type,
	)
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files WHERE id = ?
`

func (q *Queries) DeleteFile(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFile, id)
	return err
}

const getFile = `-- name: GetFile :one
SELECT id, name, file_path, type, created_at, updated_at FROM files
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, id string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FilePath,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
